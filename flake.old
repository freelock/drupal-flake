{
  description = "PHP flake for Drupal development";

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
    flake-parts.url = "github:hercules-ci/flake-parts";
    systems.url = "github:nix-systems/default";
    process-compose-flake.url = "github:Platonic-Systems/process-compose-flake";
    services-flake.url = "github:juspay/services-flake";
  };

  outputs = inputs:
    inputs.flake-parts.lib.mkFlake { inherit inputs; } {
      systems = import inputs.systems;
      imports = [
        inputs.process-compose-flake.flakeModule
      ];

      perSystem = { self', pkgs, conifg, lib, ...}: {
        process-compose."default" = { config, ...}:
          let
            alias = "${builtins.baseNameOf (builtins.getEnv "PWD")}";
            domain = "${alias}.local";
            inherit (inputs.services-flake.lib) multiService;
          in
          {
            imports = [
              inputs.services-flake.processComposeModules.default
              (multiService ./services/caddy.nix)
            ];
            services.mysql."${alias}" = {
              enable = true;
              # Override port:
              # settings.mysqld.port = 3307;
            };
            services.phpfpm."${alias}" = {
              enable = true;
              # Override PHP version:
              settings.phpfpm.package = pkgs.php83;
            };
            services.caddy."${alias}" = {
              enable = true;
              # Override domain:
              # settings.caddy.domain = "example.com";
            };
          };
        devShells.default = pkgs.mkShell {
          inputsFrom = [
            config.process-compose."default".services.outputs.devShell

          ];
        }
      };
    }
        pkgs = nixpkgs.legacyPackages.${system};

        # PHP version configuration
        php = pkgs.php83;

        # Domain configuration

        services = services-flake.lib.${system}.makeServices {
          # MariaDB service
          mariadb = {
            packages = [ pkgs.mariadb ];
            startup = ''
              mkdir -p data run
              [ -d data/mysql ] || ${pkgs.mariadb}/bin/mysql_install_db --datadir=./data
              exec ${pkgs.mariadb}/bin/mysqld --datadir=./data --socket=./run/mysqld.sock --pid-file=./run/mysqld.pid --port=3306
            '';
            docs = "MariaDB database server";
          };

          # PHP-FPM service
          php-fpm = {
            packages = [ php ];
            startup = ''
              exec ${php}/sbin/php-fpm --nodaemonize --fpm-config ${pkgs.writeText "php-fpm.conf" ''
                [global]
                pid = run/php-fpm.pid
                error_log = logs/php-fpm.log

                [www]
                listen = run/php-fpm.sock
                pm = dynamic
                pm.max_children = 5
                pm.start_servers = 2
                pm.min_spare_servers = 1
                pm.max_spare_servers = 3
              ''}
            '';
            docs = "PHP FastCGI Process Manager";
          };

          # Caddy service
          caddy = {
            packages = [ pkgs.caddy ];
            startup = ''
              mkdir -p run logs web
              cat > Caddyfile << EOF
              ${domain} {
                root * web
                php_fastcgi unix/run/php-fpm.sock
                file_server
                tls internal
                log {
                  output file logs/caddy.log
                }
              }
              EOF
              exec ${pkgs.caddy}/bin/caddy run
            '';
            docs = "Caddy web server with automatic HTTPS";
          };
        };

        # Process compose configuration
        processComposeConfig = {
          processes = {
            mariadb = {
              command = services.mariadb.startScript;
              readiness_probe = {
                exec.command = "${pkgs.mariadb}/bin/mysqladmin ping --socket=./run/mysqld.sock";
                initial_delay_seconds = 3;
                period_seconds = 5;
                timeout_seconds = 2;
                success_threshold = 1;
                failure_threshold = 5;
              };
            };
            php-fpm = {
              command = services.php-fpm.startScript;
              depends_on.mariadb.condition = "process_healthy";
              readiness_probe = {
                exec.command = "test -S ./run/php-fpm.sock";
                initial_delay_seconds = 2;
                period_seconds = 5;
                timeout_seconds = 2;
                success_threshold = 1;
                failure_threshold = 5;
              };
            };
            caddy = {
              command = services.caddy.startScript;
              depends_on.php-fpm.condition = "process_healthy";
              readiness_probe = {
                http_get = {
                  host = domain;
                  scheme = "https";
                  path = "/";
                };
                initial_delay_seconds = 1;
                period_seconds = 5;
                timeout_seconds = 2;
                success_threshold = 1;
                failure_threshold = 5;
              };
            };
          };
        };

        # Create the process-compose runner
        processCompose = process-compose-flake.lib.${system}.mkProcessCompose {
          inherit processComposeConfig;
        };

        # Helper script to add localhost entry
        setupHostsScript = pkgs.writeScript "setup-hosts.sh" ''
          #!${pkgs.bash}/bin/bash
          echo "This script requires sudo access to add an entry to your hosts file."
          echo "You may be prompted for your password."
          echo "Adding entry for ${domain} to /etc/hosts"
          if ! grep -q ${domain} /etc/hosts; then
            echo "127.0.0.1 ${domain}" | sudo tee -a /etc/hosts
            echo "Entry added successfully"
          else
            echo "Entry already exists"
          fi
        '';

      in
      {
        devShells = {
          default = pkgs.mkShell {
            buildInputs = [
              php
              php.packages.composer
              pkgs.mariadb
              pkgs.caddy
              processCompose
              setupHostsScript
            ] ++ services.packages;

            shellHook = ''
              echo "Drupal Development Environment"
              echo "PHP Version: ${php.version}"
              echo "Available commands:"
              echo "  setup-hosts: Add ${domain} to your /etc/hosts file (requires sudo)"
              echo "  process-compose up: Start all servers (MariaDB, PHP-FPM, Caddy)"
              echo "  process-compose up [service]: Start specific service"
              echo "  process-compose stop: Stop all services"
              echo "  process-compose status: Check service status"
              echo "  composer: PHP package manager"
              echo ""
              echo "Your app will be available at https://${domain}"
              echo "Caddy will automatically generate and manage SSL certificates"
            '';
          };
        };
      }

  );
}
